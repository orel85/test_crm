импорт Основное
импорт Мероприятия
импорт Общие::КурсыВалют

@Обработчик
метод ПослеЧтения()
    если ЭтоНовый()
        знч НачальнаяСтадия = ПолучитьНачальнуюСтадиюСделки()
        если НачальнаяСтадия != Неопределено
            Объект.Стадия = НачальнаяСтадия
        ;
        знч ВалютаУчета = ПолучитьВалютуУчета()
        если ВалютаУчета != Неопределено
            Объект.ВалютаСделки = ВалютаУчета
        ;
        знч ДанныеПользователя = ПользователиКлиентИСервер.ПолучитьДанныеТекущегоПользователя()
        если ДанныеПользователя.Сотрудник != Неопределено
            Объект.Ответственный = ДанныеПользователя.Сотрудник
        ;
    иначе
        УстановитьВидимостьЗаглушкиПустогоСписка()
    ;
    
    МероприятиеЗаписано.ПодключитьОбработчик(метод (Мероприятие) -> 
        ОбновитьСписокМероприятий()
        УстановитьВидимостьЗаглушкиПустогоСписка()
    ;)
;

метод КлиентПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если Объект.Клиент != Неопределено
        КлиентыФормаОбъекта.ОткрытьВМодальномОкне(КлючОбъекта = Объект.Клиент)
    ;
;

метод КонтактноеЛицоПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если Объект.КонтактноеЛицо != Неопределено
        КонтактныеЛицаФормаОбъекта.ОткрытьВМодальномОкне(КлючОбъекта = Объект.КонтактноеЛицо)
    ;
;

@Обработчик
метод ПередЗаписьюОбъекта()
    пер ПоляНеЗаполнены: Булево
    если Объект.Клиент == Неопределено
        Компоненты.ПолеВводаКлиент.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        ПоляНеЗаполнены = Истина
    иначе
        Компоненты.ПолеВводаКлиент.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
    ;
    если Объект.Направление == Неопределено
        Компоненты.ПолеВводаНаправление.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        ПоляНеЗаполнены = Истина
    иначе
        Компоненты.ПолеВводаНаправление.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
    ;
    если Объект.Наименование.Пусто()
        Компоненты.ПолеВводаСодержание.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        ПоляНеЗаполнены = Истина
    иначе
        Компоненты.ПолеВводаСодержание.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
    ;
    если Объект.Стадия == Неопределено
        Компоненты.ПолеВводаСтадия.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        ПоляНеЗаполнены = Истина
    иначе
        Компоненты.ПолеВводаСтадия.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
    ;
    если Объект.ВалютаСделки == Неопределено
        Компоненты.ПолеВводаВалюта.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        ПоляНеЗаполнены = Истина
    иначе
        Компоненты.ПолеВводаВалюта.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
    ;
    если ПоляНеЗаполнены
        выбросить новый ИсключениеВалидации("Не заполнены обязательные поля", ОтображатьСообщениеОбОшибке = Ложь)
    ;
    
    ПоказыватьУведомление = ЭтоНовый()
;

@Обработчик
метод ПослеЗаписиОбъекта()
    если ПоказыватьУведомление
        знч УведомлениеОСделке = новый Уведомление(ЛокализованныеСтроки.НоваяСделка(),
                                                   ЛокализованныеСтроки.УведомлениеОСозданииСделки(Объект.Код))
                                                   
        УведомлениеОСделке.ОценкаИнформации = ОценкаИнформации.Положительная
        УведомлениеОСделке.Показать()
    ;
    
    СделкаЗаписана.Оповестить(КлючОбъекта)
;

@Обработчик
метод ПослеУдаленияОбъекта(ПараметрыУдаления: Объект)
    СделкаЗаписана.Оповестить()
;

метод ПолучитьОписаниеСтрокиСпискаМероприятий(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    возврат ПолучитьЗаголовокДатыМероприятия(ДанныеСтроки.Данные["ДатаНачала"] как Момент, ДанныеСтроки.Данные["ДатаЗавершения"] как Момент)
;

метод ПолучитьИконкуМероприятия(ДанныеСтроки: СтрокаДинамическогоСписка): ДвоичныйОбъект.Ссылка
    знч Мероприятие = ДанныеСтроки.Данные["Ссылка"]
    если Мероприятие это Задачи.Ссылка
        возврат Ресурс{ЗадачаВРамке.svg}.Ссылка
    иначе
        возврат Ресурс{СобытиеВРамке.svg}.Ссылка
    ;
;

метод СоздатьЗадачуПриНажатии(Команда: ОбычнаяКоманда)
    ЗадачиФормаОбъекта.ОткрытьВМодальномОкне(Сделка = КлючОбъекта)
;

метод СоздатьСобытиеПриНажатии(Команда: ОбычнаяКоманда)
    СобытияФормаОбъекта.ОткрытьВМодальномОкне(Сделка = КлючОбъекта)
;

метод ПолучитьИконкуВыбраннойСтадии(): ДвоичныйОбъект.Ссылка?
    знч Стадия = Объект.Стадия
    если Стадия != Неопределено
        возврат ПолучитьИконкуСтадии(Стадия)
    ;
    возврат Неопределено
;

метод ПриВыбореФайлаДоговора(Источник: ВыборФайлов, Событие: СобытиеПриИзменении<ЧитаемыйМассив<ВыбранныйФайл>>)
    знч Файл = Событие.НовоеЗначение[0]
    Объект.ФайлДоговора = ЗагрузкаФайлов.НачатьЗагрузку(Файл).ПолучитьРезультат()
    Объект.ИмяФайлаДоговора = Файл.Имя
;

метод УдалитьФайлДоговораПриНажатии(Источник: Картинка, Событие: СобытиеПриНажатии)
    Объект.ФайлДоговора = Неопределено
    Объект.ИмяФайлаДоговора = ""
;

метод ИмяФайлаДоговораПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    ВыгрузкаФайлов.НачатьВыгрузку(Объект.ФайлДоговора, Объект.ИмяФайлаДоговора)
;

метод ОбновитьСписокМероприятий()
    Компоненты.СписокМероприятий.Обновить()
;

метод ВсеМероприятияПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    Компоненты.КомпонентВыбораВсеМероприятия.Активность = Истина
    Компоненты.КомпонентВыбораТолькоЗадачи.Активность = Ложь
    Компоненты.КомпонентВыбораТолькоСобытия.Активность = Ложь

    (Компоненты.СписокМероприятий.Источник.Фильтр.Элементы.Получить(1) как ЭлементФильтра).Использовать = Ложь
;

метод ТолькоЗадачиПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    Компоненты.КомпонентВыбораВсеМероприятия.Активность = Ложь
    Компоненты.КомпонентВыбораТолькоЗадачи.Активность = Истина
    Компоненты.КомпонентВыбораТолькоСобытия.Активность = Ложь

    знч Фильтр = новый ЭлементФильтра()
    Фильтр.Поле = "Ссылка.ПолучитьТип()"
    
    Фильтр.ВидСравнения = ВидСравнения.Равно
    Фильтр.Значение = Тип<Задачи.Ссылка>
    Фильтр.Использовать = Истина
    
    Компоненты.СписокМероприятий.Источник.Фильтр.Элементы.Установить(1, Фильтр)
;

метод ТолькоСобытияПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    Компоненты.КомпонентВыбораВсеМероприятия.Активность = Ложь
    Компоненты.КомпонентВыбораТолькоЗадачи.Активность = Ложь
    Компоненты.КомпонентВыбораТолькоСобытия.Активность = Истина

    знч Фильтр = новый ЭлементФильтра()
    Фильтр.Поле = "Ссылка.ПолучитьТип()"
    
    Фильтр.ВидСравнения = ВидСравнения.Равно
    Фильтр.Значение = Тип<События.Ссылка>
    Фильтр.Использовать = Истина

    Компоненты.СписокМероприятий.Источник.Фильтр.Элементы.Установить(1, Фильтр)
;

метод ПолучитьЗаголовокДатыМероприятия(ДатаНачала: Момент, ДатаЗавершения: Момент): Строка
    знч ДатаВремяНачала = ДатаНачала.ВДатаВремя(ЧасовойПояс.Текущий())
    знч ДатаВремяЗавершения = ДатаЗавершения.ВДатаВремя(ЧасовойПояс.Текущий())
    
    // Даты начала и завершения установлены 
    если ДатаНачала != Момент{} и ДатаЗавершения != Момент{}

        // Мероприятие начинается и завершается в один день
        если ДатаВремяНачала.Дата == ДатаВремяЗавершения.Дата
            возврат "%{ПредставлениеДаты(ДатаВремяНачала)} ${ДатаВремяНачала|ЧЧ:мм} – ${ДатаВремяЗавершения|ЧЧ:мм}"
    
        // Мероприятие начинается и завершается в разные дни
        иначе
            возврат "%{ПредставлениеДатыИВремени(ДатаВремяНачала)} – %{ПредставлениеДатыИВремени(ДатаВремяЗавершения)}"
        ;
    
    // Установлена только дата начала
    иначе если ДатаНачала != Момент{}
        возврат "%{ПредставлениеДатыИВремени(ДатаВремяНачала)}"
    
    // Установлена только дата завершения
    иначе если ДатаЗавершения != Момент{}
        возврат "%{ПредставлениеДатыИВремени(ДатаВремяЗавершения)}"
    ;
    
    возврат "Дата не установлена"
;

метод ПредставлениеДаты(ДатаМероприятия: ДатаВремя): Строка
    знч Сейчас = ДатаВремя.Сейчас()
    
    если ДатаМероприятия.Дата == Сейчас.Дата
        возврат ЛокализованныеСтроки.Сегодня()
    иначе
        если ДатаМероприятия.Год == Сейчас.Год
            возврат "${ДатаМероприятия|дд МММ}"
        иначе
            возврат "${ДатаМероприятия|дд МММ гггг}"
        ;
    ;
;

метод ПредставлениеДатыИВремени(ДатаМероприятия: ДатаВремя): Строка
    знч Сейчас = ДатаВремя.Сейчас()
    
    если ДатаМероприятия.Дата == Сейчас.Дата
        возврат "%{ЛокализованныеСтроки.Сегодня()} ${ДатаМероприятия|ЧЧ:мм}"
    иначе
        если ДатаМероприятия.Год == Сейчас.Год
            возврат "${ДатаМероприятия|дд МММ ЧЧ:мм}"
        иначе
            возврат "${ДатаМероприятия|дд МММ гггг ЧЧ:мм}"
        ;
    ;
;

метод ПолучитьСтатусМероприятия(ДанныеСтроки: СтрокаДинамическогоСписка): СтатусМероприятия?
    знч Статус = ДанныеСтроки.Данные["Статус"] как СтатусМероприятия?
    если Статус == Неопределено
        знч ДатаНачала = ДанныеСтроки.Данные["ДатаНачала"] как Момент
        знч ДатаЗавершения = ДанныеСтроки.Данные["ДатаЗавершения"] как Момент
        знч Сейчас = Момент.Сейчас()
        
        если Сейчас > ДатаЗавершения
            возврат СтатусМероприятия.Завершено
        иначе если Сейчас < ДатаНачала
            возврат СтатусМероприятия.Запланировано
        иначе если Сейчас > ДатаНачала и Сейчас < ДатаЗавершения
            возврат СтатусМероприятия.ВПроцессе
        ;
        возврат Неопределено
    иначе
        возврат Статус
    ;
;

метод ЗавершитьМероприятиеПриНажатии(Команда: КомандаСПараметром<Сущность.Ключ>, Параметр: Сущность.Ключ)
    знч Мероприятие = Параметр как КонтрактМероприятия.Ссылка
    ЗавершитьМероприятие(Мероприятие)

    ОбновитьСписокМероприятий()

    знч Уведомление = новый Уведомление(ЛокализованныеСтроки.ЗавершениеМероприятия(), ЛокализованныеСтроки.МероприятиеЗавершено(Мероприятие))
    Уведомление.ОценкаИнформации = ОценкаИнформации.Положительная
    Уведомление.Показать()
;

метод ПодсказкаПустогоСпискаМероприятий(): Строка
    возврат ЭтоНовый() ? ЛокализованныеСтроки.ДляСозданияМероприятийСохранитеСделку() : ЛокализованныеСтроки.ДляСозданияНажмитеДобавитьМероприятие()
;

метод УстановитьВидимостьЗаглушкиПустогоСписка()
    Компоненты.ЗаглушкаПустогоСпискаМероприятий.Видимость = КоличествоМероприятийПоСделке(КлючОбъекта) == 0
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьНачальнуюСтадиюСделки(): СтадииСделок.Ссылка?
    возврат СтадииСделок.ПолучитьНачальнуюСтадию()
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьВалютуУчета(): Валюты.Ссылка?
    возврат Валюты.ПолучитьБазовуюВалюту()
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьИконкуСтадии(Стадия: СтадииСделок.Ссылка): ДвоичныйОбъект.Ссылка?
    возврат СтадииСделок.ПолучитьИконкуСтадии(Стадия)
;

@НаСервере @ДоступноСКлиента
статический метод ЗавершитьМероприятие(Мероприятие: КонтрактМероприятия.Ссылка)
    исп Транзакции.Начать()
    знч МероприятиеОбъект = Мероприятие.ЗагрузитьОбъект(Истина)
    МероприятиеОбъект.Завершить()
;

@НаСервере @ДоступноСКлиента
статический метод УдалитьМероприятие(Мероприятие: КонтрактМероприятия.Ссылка)
    исп Транзакции.Начать()
    знч МероприятиеОбъект = Мероприятие.ЗагрузитьОбъект(Истина)
    МероприятиеОбъект.Удалить()
;

@НаСервере @ДоступноСКлиента
статический метод КоличествоМероприятийПоСделке(Сделка: Сделки.Ссылка): Число
    возврат Сделки.КоличествоМероприятийПоСделке(Сделка)
;
